import datetime
import sqlite3
import requests

class BaseDeDonnee :
    def __init__(self, fichierVilles, fichierBDD, cleAPI) :
        self.fichierVilles = fichierVilles  #Le fichier qui va nous permettre de recuperer la liste des villes
        self.fichierBDD = fichierBDD  #Le fichier qui va gerer la base de donnee (Type : Data Base File)
        self.cleAPI = cleAPI
        self.listeVilles = []  #La liste des villes recuperee a partie du fichier villes
        self.numeroVille = None  #Le numero de la ville qu'on est en train d'enregistrer dans la bdd
        self.tailleVilles = None  #Taille de la liste des villes
        self.tempsDernieresRequetes = None  #Variable de temps utilisee pour ne pas depasser nos 60 requetes par minutes autorisees.
        
    def initialiser(self):
        ##CREE LE FICHIER BASE DE DONNEE (Type : Data Base File) S'IL N'EXISTE PAS ENCORE
        #Normalement nous vous fournissons deja une base de donnee avec quelques donnees pre-enregistrees.
        conn = sqlite3.connect(self.fichierBDD)   #Etablie la connection avec la bdd
        cursor = conn.cursor()
        cursor.execute("""
                       CREATE TABLE IF NOT EXISTS meteo(   
                       id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
                       ville TEXT,
                       date TEXT,
                       temperature INTEGER,
                       temps TEXT
                       )
                   """)   #Cree la table si elle n'existe pas
        conn.commit()   #commit les modifications
        conn.close()   #ferme la connection
        
        ##RECUPERE LA LISTE DES VILLES DU DOCUMENT ANNEXE
        f = open(self.fichierVilles, "r")
        self.numeroVille = int(f.readline()) #La premiere ligne du fichier correspond au numero de la ville a laquelle on a arrete l'enregistrement la derniere fois.
        ligne = f.readline()
        while ligne != "":
            self.listeVilles += [ligne]  #On recupere les villes
            ligne = f.readline()
        f.close()
        self.tailleVilles = len(self.listeVilles) -1 #La premiere ligne n'est pas une ville
    
    def getTemperature(dataRequest):   #Recupere la temperature a partir du resultat de la requete
        return(dataRequest['main']['temp'])

    def getDate(dataRequest):   #Recupere la date et l'heure a laquelle la meteo a ete prise pour la derniere fois a partir du resultat de la requete
        return(datetime.datetime.fromtimestamp(dataRequest['dt']))

    def getTemps(dataRequest):   #Recupere le temps a partir du resultat de la requete
        return(dataRequest['weather'][0]['main'])    
    
    def enregistrer(self):
        print("ok1")
        conn = sqlite3.connect(self.fichierBDD)   #Etablie la connection avec la bdd
        cursor = conn.cursor()
        for i in range(60) : #On dispose de 60 requetes par minute
            ville = self.listeVilles[self.numeroVille]
            req = requests.get("http://api.openweathermap.org/data/2.5/weather?q="+ville+",fr&appid="+self.cleAPI)  #Recupere la meteo d'une ville avec notre cle API
            data = req.json()  #Convertie la reponse au bon format
            if data['cod'] != '404' :   #On verifie que la ville ait ete trouvee
                #On ajoute le resultat dans la base de donnee
                cursor.execute("""
                               INSERT INTO meteo(ville, date, temperature, temps) 
                               VALUES(?, ?, ?, ?)""",(ville, getDate(data), getTemperature(data), getTemps(data)))
            self.numeroVille = (self.numeroVille+1)%self.tailleVilles
        conn.commit()   #commit les modifications
        conn.close()   #ferme la connection
        self.tempsDernieresRequetes = datetime.datetime.now()
        
        #On recupere le texte du document villes
        recup = open(self.fichierVilles, "r")
        lignes = recup.readlines()  #On enregistre a quelle ville on s'est arrete dans le document.
        recup.close()
        
        #On change la valeur de sauvegarde
        lignes[0] = str(self.numeroVille)+"\t\n"
        
        #On le re-enregistre
        enreg = open(self.fichierVilles, "w")
        enreg.writelines(lignes)
        enreg.close()
        print("ok2")
         
            
##FONCTIONS UTILISEES POUR TRAITER LES REPONSES DE OPENWEATHERMAP (ne necessitant pas d'etre dans la classe BaseDeDonnee)
def getTemperature(dataRequest):   #Recupere la temperature a partir du resultat de la requete
    return(dataRequest['main']['temp'])

def getDate(dataRequest):   #Recupere la date et l'heure a laquelle la meteo a ete prise pour la derniere fois a partir du resultat de la requete
    return(datetime.datetime.fromtimestamp(dataRequest['dt']))

def getTemps(dataRequest):   #Recupere le temps a partir du resultat de la requete
    return(dataRequest['weather'][0]['main'])
